presets:
- labels:
    preset-k8s-ssh: "true"
  env:
  - name: USER
    value: prow
  - name: JENKINS_GCE_SSH_PRIVATE_KEY_FILE
    value: /etc/ssh-key-secret/ssh-private
  - name: JENKINS_GCE_SSH_PUBLIC_KEY_FILE
    value: /etc/ssh-key-secret/ssh-public
  volumes:
  - name: ssh
    secret:
      defaultMode: 0400
      # TODO: see if we can use OS login instead of this
      #   corresponds to a manually created ssh key
      #   added to project-wide ssh-keys for e2e projects during project creation
      #   on kubernetes-public/prow-build-test
      secretName: ssh-key-secret
  volumeMounts:
  - name: ssh
    mountPath: /etc/ssh-key-secret
    readOnly: true
- labels:
    preset-service-account: "true"
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/service-account/service-account.json
  # storage e2e tests borrow this as a preconfigured key instead of creating and
  # injecting a new key. this allows us to avoid mass key download warnings
  - name: E2E_GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/service-account/service-account.json
  - name: GOOGLE_APPLICATION_CREDENTIALS_DEPRECATED
    value: "Migrate to workload identity, contact sig-testing"
  volumes:
  - name: service
    secret:
      # prow-build-test@kubernetes-public.iam.gserviceaccount.com on kubernetes-public/prow-build-test
      secretName: service-account
  volumeMounts:
  - name: service
    mountPath: /etc/service-account
    readOnly: true
# docker-in-docker (with images/bootstrap) preset
# NOTE: using this also requires using that image,
# ensuring you run your test under either the ENTRYPOINT or:
# /usr/local/bin/runner.sh my-test-command --foo --bar
# AND setting the following on your PodSpec:
# securityContext:
#   privileged: true
- labels:
    preset-dind-enabled: "true"
  env:
  - name: DOCKER_IN_DOCKER_ENABLED
    value: "true"
  volumes:
  # kubekins-e2e legacy path
  - name: docker-graph
    emptyDir: {}
  # krte (normal) path
  - name: docker-root
    emptyDir: {}
  volumeMounts:
  - name: docker-graph
    mountPath: /docker-graph
  - name: docker-root
    mountPath: /var/lib/docker
# storage / caching presets
- labels:
    preset-bazel-scratch-dir: "true"
  env:
  - name: TEST_TMPDIR
    value: /bazel-scratch/.cache/bazel
  volumes:
  - name: bazel-scratch
    emptyDir: {}
  volumeMounts:
  - name: bazel-scratch
    mountPath: /bazel-scratch/.cache
- labels:
    preset-bazel-remote-cache-enabled: "true"
  env:
  - name: BAZEL_REMOTE_CACHE_ENABLED
    value: "true"
# volume mounts for kind
- labels:
    preset-kind-volume-mounts: "true"
  volumeMounts:
    - mountPath: /lib/modules
      name: modules
      readOnly: true
    - mountPath: /sys/fs/cgroup
      name: cgroup
  volumes:
    - name: modules
      hostPath:
        path: /lib/modules
        type: Directory
    - name: cgroup
      hostPath:
        path: /sys/fs/cgroup
        type: Directory
# scalability
- labels:
    preset-e2e-scalability-common: "true"
  env:
  # Override GCE defaults.
  - name: NODE_SIZE
    value: "n1-standard-1"
  - name: NODE_DISK_SIZE
    value: "50GB"
  - name: REGISTER_MASTER
    value: "true"
  - name: LOGROTATE_MAX_SIZE
    value: "5G"
  # Use IP-aliases for scalability tests.
  - name: KUBE_GCE_ENABLE_IP_ALIASES
    value: "true"
  - name: CREATE_CUSTOM_NETWORK
    value: "true"
  # Ensure good enough architecture for master machines.
  - name: MASTER_MIN_CPU_ARCHITECTURE
    value: "Intel Broadwell"
  # Turn on profiling for various components and
  # increase throughput in master components.
  - name: ETCD_EXTRA_ARGS
    value: "--enable-pprof"
  - name: CONTROLLER_MANAGER_TEST_ARGS
    value: "--profiling --kube-api-qps=100 --kube-api-burst=100"
  - name: KUBELET_TEST_ARGS
    value: "--enable-debugging-handlers"
  - name: KUBEPROXY_TEST_ARGS
    # TODO(#74011): Remove metrics-bind-address if the default is set.
    value: "--profiling --metrics-bind-address=0.0.0.0"
  - name: SCHEDULER_TEST_ARGS
    value: "--profiling --kube-api-qps=100 --kube-api-burst=100"
  # Reduce logs verbosity.
  - name: TEST_CLUSTER_LOG_LEVEL
    value: --v=2
  - name: API_SERVER_TEST_LOG_LEVEL
    value: "--v=3"
  # Increase resync period to simulate production.
  - name: TEST_CLUSTER_RESYNC_PERIOD
    value: --min-resync-period=12h
  # Reduce etcd compaction frequency to match production.
  - name: ETCD_COMPACTION_INTERVAL_SEC
    value: "150"
  # Increase delete collection parallelism.
  - name: TEST_CLUSTER_DELETE_COLLECTION_WORKERS
    value: --delete-collection-workers=16
  # Dump full systemd journal on master and nodes.
  - name: LOG_DUMP_SYSTEMD_JOURNAL
    value: "true"
  # Dump clusterloader prober's log files
  - name: LOG_DUMP_EXTRA_FILES
    value: "cl2-*"
  # Timeout for the log dumping over SSH. Relevant only if fallback to SSH log dumping takes place
  # e.g. when logexporter daemonset fails for some reason.
  # We deliberately cap it at 1h to avoid spending too much time (e.g. over 5h for 5k node cluster)
  # on dumping logs that in most cases we won't need anyway.
  - name: LOG_DUMP_SSH_TIMEOUT_SECONDS
    value: 3600
  # Keep all logrotated files (not just 5 latest which is a default)
  - name: LOGROTATE_FILES_MAX_COUNT
    value: 1000
  - name: ENABLE_PROMETHEUS_SERVER
    value: "true"
  - name: KUBE_MASTER_NODE_LABELS
    value: "node.kubernetes.io/node-exporter-ready=true"
  # Use private clusters for scalability tests - https://github.com/kubernetes/kubernetes/issues/76374
  - name: KUBE_GCE_PRIVATE_CLUSTER
    value: "true"
  - name: PROMETHEUS_SCRAPE_ETCD
    value: "true"
  # Disable kubernetes-dashboard
  - name: KUBE_ENABLE_CLUSTER_UI
    value: "false"
  # Enable assertions on scheduler throughput in density test.
  # Setting the threshold to 90 should allow us to catch regressions like
  # https://github.com/kubernetes/kubernetes/pull/85030 while not making the tests flaky.
  - name: CL2_SCHEDULER_THROUGHPUT_THRESHOLD
    value: 90
- labels:
    preset-e2e-scalability-containerd: "true"
  env:
  - name: CL2_PROBE_MEASUREMENTS_CHECK_PROBES_READY_TIMEOUT
    value: "10m"
  - name: KUBE_CONTAINER_RUNTIME
    value: "containerd"
  - name: LOG_DUMP_SAVE_SERVICES
    value: "containerd"

periodics:
- interval: 1h
  name: ci-kubernetes-kind-e2e-parallel-test
  cluster: k8s-infra-prow-build
  annotations:
    testgrid-dashboards: sig-release-master-blocking, sig-testing-kind
    testgrid-tab-name: kind-master-parallel
    description: Uses kubetest to run e2e tests against a latest kubernetes master cluster created with sigs.k8s.io/kind
    testgrid-alert-email: bentheelder@google.com,antonio.ojea.garcia@gmail.com,kubernetes-release-team@googlegroups.com
    testgrid-num-columns-recent: '6'
    fork-per-release: "true"
    fork-per-release-periodic-interval: 1h 2h 6h 24h
  labels:
    preset-bazel-scratch-dir: "true"
    preset-bazel-remote-cache-enabled: "true"
    preset-dind-enabled: "true"
    preset-kind-volume-mounts: "true"
  decorate: true
  decoration_config:
    timeout: 60m
  extra_refs:
  - org: kubernetes
    repo: kubernetes
    base_ref: master
    path_alias: k8s.io/kubernetes
  spec:
    containers:
    - image: gcr.io/k8s-testimages/krte:v20200430-04773e2-master
      command:
      - wrapper.sh
      - bash
      - -c
      - curl -sSL https://kind.sigs.k8s.io/dl/latest/linux-amd64.tgz | tar xvfz - -C "${PATH%%:*}/" && e2e-k8s.sh
      env:
      - name: FOCUS
        value: "."
      # TODO(bentheelder): reduce the skip list further
      - name: SKIP
        value: \[Slow\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]|PodSecurityPolicy|LoadBalancer|load.balancer|In-tree.Volumes.\[Driver:.nfs\]|PersistentVolumes.NFS|Network.should.set.TCP.CLOSE_WAIT.timeout|Simple.pod.should.support.exec.through.an.HTTP.proxy|subPath.should.support.existing|should.provide.basic.identity|\[NodeFeature:PodReadinessGate\]
      - name: PARALLEL
        value: "true"
      - name: BUILD_TYPE
        value: bazel
      # we need privileged mode in order to do docker in docker
      securityContext:
        privileged: true
      resources:
        requests:
          # these are both a bit below peak usage during build
          # this is mostly for building kubernetes
          memory: "9000Mi"
          # during the tests more like 3-20m is used
          cpu: 2000m
- interval: 1h
  name: ci-kubernetes-kind-ipv6-e2e-parallel-test
  cluster: k8s-infra-prow-build
  annotations:
    testgrid-dashboards: sig-release-master-blocking, sig-testing-kind
    testgrid-tab-name: kind-ipv6-master-parallel
    description: Uses kubetest to run e2e tests against a latest kubernetes master IPv6 cluster created with sigs.k8s.io/kind
    testgrid-alert-email: bentheelder@google.com,antonio.ojea.garcia@gmail.com,kubernetes-release-team@googlegroups.com
    testgrid-num-columns-recent: '6'
    fork-per-release: "true"
    fork-per-release-periodic-interval: 1h 2h 6h 24h
  labels:
    preset-bazel-scratch-dir: "true"
    preset-bazel-remote-cache-enabled: "true"
    preset-dind-enabled: "true"
    preset-kind-volume-mounts: "true"
  decorate: true
  decoration_config:
    timeout: 60m
  extra_refs:
  - org: kubernetes
    repo: kubernetes
    base_ref: master
    path_alias: k8s.io/kubernetes
  spec:
    containers:
    - image: gcr.io/k8s-testimages/krte:v20200430-04773e2-master
      command:
      - wrapper.sh
      - bash
      - -c
      - curl -sSL https://kind.sigs.k8s.io/dl/latest/linux-amd64.tgz | tar xvfz - -C "${PATH%%:*}/" && e2e-k8s.sh
      env:
      # enable IPV6 in bootstrap image
      - name: DOCKER_IN_DOCKER_IPV6_ENABLED
        value: "true"
      # tell kind CI script to use ipv6
      - name: IP_FAMILY
        value: "ipv6"
      - name: FOCUS
        value: "."
      # TODO(bentheelder): reduce the skip list further
      - name: SKIP
        value: \[Slow\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]|PodSecurityPolicy|LoadBalancer|load.balancer|In-tree.Volumes.\[Driver:.nfs\]|PersistentVolumes.NFS|Network.should.set.TCP.CLOSE_WAIT.timeout|Simple.pod.should.support.exec.through.an.HTTP.proxy|subPath.should.support.existing|should.provide.basic.identity|\[NodeFeature:PodReadinessGate\]
      - name: PARALLEL
        value: "true"
      - name: BUILD_TYPE
        value: bazel
      # we need privileged mode in order to do docker in docker
      securityContext:
        privileged: true
      resources:
        requests:
          # these are both a bit below peak usage during build
          # this is mostly for building kubernetes
          memory: "9000Mi"
          # during the tests more like 3-20m is used
          cpu: 2000m

- name: periodic-kubernetes-bazel-build-master-test
  cluster: k8s-infra-prow-build
  annotations:
    fork-per-release: "true"
    fork-per-release-replacements: "latest-bazel.txt -> latest-bazel-{{.Version}}.txt"
    fork-per-release-periodic-interval: 6h
    testgrid-alert-email: kubernetes-sig-testing-alerts@googlegroups.com, k8s-infra-oncall@google.com
    testgrid-dashboards: sig-release-master-blocking, google-unit
    testgrid-tab-name: bazel-build-master
    description: run bazel build //... -//vendor/...
  interval: 5m
  decorate: true
  labels:
    preset-service-account: "true"
    preset-bazel-scratch-dir: "true"
  extra_refs:
  - base_ref: master
    org: kubernetes
    repo: kubernetes
  - base_ref: master
    org: kubernetes
    repo: test-infra
  spec:
    containers:
    - image: gcr.io/k8s-testimages/kubekins-e2e:v20200428-06f6e3b-master
      command:
      - bash
      args:
      - -c
      - |
        set -o errexit
        gcloud auth activate-service-account --key-file=/etc/service-account/service-account.json
        # NOTE: --config=ci \
        ../test-infra/scenarios/kubernetes_bazel.py \
            "--build=//... -//vendor/..." \
            --release=//build/release-tars \
            --gcs=gs://kubernetes-release-dev/ci-periodic \
            --version-suffix=-bazel

- interval: 12h
  cluster: k8s-infra-prow-build
  name: ci-kubernetes-e2e-gci-gce-scalability
  tags:
  - "perfDashPrefix: gce-100Nodes-master"
  - "perfDashJobType: performance"
  - "perfDashBuildsCount: 500"
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
    preset-e2e-scalability-common: "true"
    preset-e2e-scalability-containerd: "true"
  annotations:
    fork-per-release: "true"
    fork-per-release-cron: 0 */6 * * *, 0 0/12 * * *, 0 4-16/12 * * *, 0 8-20/12 * * *
    fork-per-release-generic-suffix: "true"
    fork-per-release-replacements: "gce-100Nodes-master -> gce-100Nodes-{{.Version}}, --repo=k8s.io/perf-tests=master -> --repo=k8s.io/perf-tests=release-{{.Version}}"
    testgrid-dashboards: sig-release-master-blocking, sig-scalability-gce, google-gce, google-gci
    testgrid-tab-name: gce-cos-master-scalability-100
    testgrid-alert-email: kubernetes-sig-scale@googlegroups.com, kubernetes-scalability-tickets@google.com
    description: "Uses kubetest to run k8s.io/perf-tests/run-e2e.sh against a 100-node cluster created with cluster/kube-up.sh"
    testgrid-num-failures-to-alert: '2'
  spec:
    containers:
    - image: gcr.io/k8s-testimages/kubekins-e2e:v20200424-a0ea3b9-master
      args:
      # NOTE: override from gs://kubernetes-jenkins/logs
      - --upload=gs://bashfire-prow/logs
      - --timeout=140
      - --repo=k8s.io/kubernetes=master
      - --repo=k8s.io/perf-tests=master
      - --root=/go/src
      - --scenario=kubernetes_e2e
      - --
      - --check-leaked-resources
      # TODO(oxddr): remove once debugging is finished
      - --env=KUBEPROXY_TEST_LOG_LEVEL=--v=4
      - --cluster=e2e-big
      - --extract=ci/latest
      - --gcp-node-image=gci
      - --gcp-nodes=100
      # NOTE: pinned to spiffp-gce-project
      - --gcp-project=spiffxp-gce-project
      - --gcp-zone=us-east1-b
      - --provider=gce
      - --test=false
      - --test-cmd=$GOPATH/src/k8s.io/perf-tests/run-e2e.sh
      - --test-cmd-args=cluster-loader2
      - --test-cmd-args=--experimental-gcp-snapshot-prometheus-disk=true
      - --test-cmd-args=--experimental-prometheus-disk-snapshot-name=${JOB_NAME}-${BUILD_ID}
      - --test-cmd-args=--nodes=100
      - --test-cmd-args=--prometheus-scrape-node-exporter
      - --test-cmd-args=--provider=gce
      - --test-cmd-args=--report-dir=/workspace/_artifacts
      - --test-cmd-args=--testconfig=testing/density/config.yaml
      - --test-cmd-args=--testconfig=testing/load/config.yaml
      - --test-cmd-args=--testconfig=testing/access-tokens/config.yaml
      # TODO(oxddr): re-enable this once we understand its impact on tests, https://github.com/kubernetes/kubernetes/issues/89051
      # - --test-cmd-args=--testoverrides=./testing/chaosmonkey/override.yaml
      # - --test-cmd-args=--testoverrides=./testing/chaosmonkey/ignore_node_killer_container_restarts_100.yaml
      - --test-cmd-args=--testoverrides=./testing/experiments/enable_prometheus_api_responsiveness.yaml
      - --test-cmd-args=--testoverrides=./testing/experiments/enable_restart_count_check.yaml
      - --test-cmd-args=--testoverrides=./testing/experiments/use_simple_latency_query.yaml
      - --test-cmd-args=--testoverrides=./testing/load/gce/throughput_override.yaml
      - --test-cmd-name=ClusterLoaderV2
      - --timeout=120m
      - --use-logexporter
